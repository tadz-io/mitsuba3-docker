name: Build and Push Mitsuba Docker Image

# This section defines the trigger for the workflow.
on:
  # Run the workflow on every push to the "main" branch.
  push:
    branches: [ "vastai-cuda-12.8.1-auto" ]

  # Also allow running this workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

jobs:
  # This is the main job, you can name it anything.
  build-and-push:
    # Use a standard Ubuntu runner provided by GitHub.
    runs-on: ubuntu-latest

    # Grant the job permission to push images to the GitHub Container Registry.
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Get the code from your repository.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Log in to the GitHub Container Registry (ghcr.io).
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Set up Docker Buildx, which is needed for building.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 4. Automatically generate tags for the Docker image.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,prefix=
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/vastai-cuda-12.8.1-auto' }}
            type=raw,value=cuda-12.8.1,enable=${{ github.ref == 'refs/heads/vastai-cuda-12.8.1-auto' }}

      # 5. Build the image using your Dockerfile and push it to the registry.
      - name: Build and push Docker image
        uses: docker/build-push-action@v6.18.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
